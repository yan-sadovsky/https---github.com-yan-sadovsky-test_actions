var Status;
(function (Status) {
    Status["FAILED"] = "failed";
    Status["BROKEN"] = "broken";
    Status["PASSED"] = "passed";
    Status["SKIPPED"] = "skipped";
})(Status || (Status = {}));
var Stage;
(function (Stage) {
    Stage["SCHEDULED"] = "scheduled";
    Stage["RUNNING"] = "running";
    Stage["FINISHED"] = "finished";
    Stage["PENDING"] = "pending";
    Stage["INTERRUPTED"] = "interrupted";
})(Stage || (Stage = {}));
var LabelName;
(function (LabelName) {
    LabelName["ALLURE_ID"] = "ALLURE_ID";
    LabelName["AS_ID"] = "ALLURE_ID";
    LabelName["SUITE"] = "suite";
    LabelName["PARENT_SUITE"] = "parentSuite";
    LabelName["SUB_SUITE"] = "subSuite";
    LabelName["EPIC"] = "epic";
    LabelName["FEATURE"] = "feature";
    LabelName["STORY"] = "story";
    LabelName["SEVERITY"] = "severity";
    LabelName["TAG"] = "tag";
    LabelName["OWNER"] = "owner";
    LabelName["LEAD"] = "lead";
    LabelName["HOST"] = "host";
    LabelName["THREAD"] = "thread";
    LabelName["TEST_METHOD"] = "testMethod";
    LabelName["TEST_CLASS"] = "testClass";
    LabelName["PACKAGE"] = "package";
    LabelName["FRAMEWORK"] = "framework";
    LabelName["LANGUAGE"] = "language";
    LabelName["LAYER"] = "layer";
})(LabelName || (LabelName = {}));
var Severity;
(function (Severity) {
    Severity["BLOCKER"] = "blocker";
    Severity["CRITICAL"] = "critical";
    Severity["NORMAL"] = "normal";
    Severity["MINOR"] = "minor";
    Severity["TRIVIAL"] = "trivial";
})(Severity || (Severity = {}));
var ContentType;
(function (ContentType) {
    ContentType["TEXT"] = "text/plain";
    ContentType["XML"] = "application/xml";
    ContentType["HTML"] = "text/html";
    ContentType["CSV"] = "text/csv";
    ContentType["TSV"] = "text/tab-separated-values";
    ContentType["CSS"] = "text/css";
    ContentType["URI"] = "text/uri-list";
    ContentType["SVG"] = "image/svg+xml";
    ContentType["PNG"] = "image/png";
    ContentType["JSON"] = "application/json";
    ContentType["ZIP"] = "application/zip";
    ContentType["WEBM"] = "video/webm";
    ContentType["JPEG"] = "image/jpeg";
    ContentType["MP4"] = "video/mp4";
})(ContentType || (ContentType = {}));
var LinkType;
(function (LinkType) {
    LinkType["ISSUE"] = "issue";
    LinkType["TMS"] = "tms";
})(LinkType || (LinkType = {}));

var stripAnsi$1 = {exports: {}};

var ansiRegex$1 = options => {
	options = Object.assign({
		onlyFirst: false
	}, options);

	const pattern = [
		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
	].join('|');

	return new RegExp(pattern, options.onlyFirst ? undefined : 'g');
};

const ansiRegex = ansiRegex$1;

const stripAnsi = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;

stripAnsi$1.exports = stripAnsi;
stripAnsi$1.exports.default = stripAnsi;

var MessageType;
(function (MessageType) {
    MessageType["TEST_STARTED"] = "TEST_STARTED";
    MessageType["TEST_ENDED"] = "TEST_ENDED";
    MessageType["STEP_STARTED"] = "STEP_STARTED";
    MessageType["STEP_ENDED"] = "STEP_ENDED";
    MessageType["METADATA"] = "METADATA";
    MessageType["SCREENSHOT"] = "SCREENSHOT";
})(MessageType || (MessageType = {}));

const pushReportMessage = (message) => {
    const reportMessage = Cypress.env("allure").reportMessage;
    reportMessage.messages.push(message);
    Cypress.env("allure", { reportMessage });
};

const uint8ArrayToBase64 = (data) => {
    const u8arrayLike = Array.isArray(data) || data.buffer;
    if (!u8arrayLike) {
        return data;
    }
    return btoa(String.fromCharCode.apply(null, data));
};
const normalizeAttachmentContentEncoding = (data, encoding) => {
    const u8arrayLike = Array.isArray(data) || data.buffer;
    if (u8arrayLike) {
        return "base64";
    }
    return encoding;
};
const label = (name, value) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            labels: [{ name, value }],
        },
    });
};
const link = (url, name, type) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            links: [{ type, url, name }],
        },
    });
};
const parameter = (name, value, options) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            parameter: [Object.assign({ name, value }, options)],
        },
    });
};
const description = (markdown) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            description: markdown,
        },
    });
};
const descriptionHtml = (html) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            descriptionHtml: html,
        },
    });
};
const testCaseId = (value) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            testCaseId: value,
        },
    });
};
const historyId = (value) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            historyId: value,
        },
    });
};
const allureId = (value) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            labels: [{ name: LabelName.ALLURE_ID, value }],
        },
    });
};
const displayName = (name) => {
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            displayName: name,
        },
    });
};
const issue = (url, name) => {
    link(url, name, LinkType.ISSUE);
};
const tms = (url, name) => {
    link(url, name, LinkType.TMS);
};
const epic = (name) => {
    label(LabelName.EPIC, name);
};
const feature = (name) => {
    label(LabelName.FEATURE, name);
};
const story = (name) => {
    label(LabelName.STORY, name);
};
const suite = (name) => {
    label(LabelName.SUITE, name);
};
const parentSuite = (name) => {
    label(LabelName.PARENT_SUITE, name);
};
const subSuite = (name) => {
    label(LabelName.SUB_SUITE, name);
};
const owner = (name) => {
    label(LabelName.OWNER, name);
};
const severity = (name) => {
    label(LabelName.SEVERITY, name);
};
const layer = (name) => {
    label(LabelName.LAYER, name);
};
const tag = (name) => {
    label(LabelName.TAG, name);
};
const attachment = (name, content, type = "text/plain", encoding = "utf8") => {
    const attachmentRawContent = (content === null || content === void 0 ? void 0 : content.type) === "Buffer" ? content.data : content;
    const actualEncoding = normalizeAttachmentContentEncoding(attachmentRawContent, encoding);
    const attachmentContent = uint8ArrayToBase64(attachmentRawContent);
    pushReportMessage({
        type: MessageType.METADATA,
        payload: {
            attachments: [
                {
                    content: attachmentContent,
                    encoding: actualEncoding,
                    name,
                    type,
                },
            ],
        },
    });
};
const step = (name, body) => {
    cy.wrap(null, { log: false })
        .then(() => {
        pushReportMessage({
            type: MessageType.STEP_STARTED,
            payload: { name, start: Date.now() },
        });
        body();
    })
        .then(() => {
        pushReportMessage({
            type: MessageType.STEP_ENDED,
            payload: {
                status: Status.PASSED,
                stage: Stage.FINISHED,
                stop: Date.now(),
            },
        });
    });
};

export { allureId, attachment, description, descriptionHtml, displayName, epic, feature, historyId, issue, label, layer, link, normalizeAttachmentContentEncoding, owner, parameter, parentSuite, severity, step, story, subSuite, suite, tag, testCaseId, tms, uint8ArrayToBase64 };
//# sourceMappingURL=index.mjs.map
